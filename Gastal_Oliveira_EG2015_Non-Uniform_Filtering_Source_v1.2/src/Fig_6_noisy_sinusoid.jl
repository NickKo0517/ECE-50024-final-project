#
#  The core equations of our method are implemented in the file
#  'our_method.jl'.  Please see the README.txt file for instructions.
#

#  This code is part of the reference implementation of the paper
#
#    "High-Order Recursive Filtering of Non-uniformly Sampled Signals
#     for Image and Video Processing"
#    Eduardo S. L. Gastal  and  Manuel M. Oliveira
#    Computer Graphics Forum. Volume 34 (2015), Number 2.
#    Proceedings of Eurographics 2015, pp. 81-93.
# 
#  Please refer to the publication above if you use this software. For an
#  up-to-date version go to:
#  
#            http://inf.ufrgs.br/~eslgastal/NonUniformFiltering/
#
#
#  THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY EXPRESSED OR IMPLIED WARRANTIES
#  OF ANY KIND, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THIS SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THIS SOFTWARE.
#
#  Version 1.2 - November 17, 2015.

# Generate a sinusoid at the specifiec frequency
w_half_cycles_per_sample = 0.12
F(x) = cos(x .* w_half_cycles_per_sample * pi)
t = float64(collect(0:500))
N = length(t)
f_in = F(t)

# Add noise in the form of random sinusoids with frequency
# outside the filter's band-pass range and below the average
# Nyquist rate after non-uniform sampling.
delta = 0.05
far(w) = (abs(w-w_half_cycles_per_sample) > delta) && (w < 1/4)
f = f_in + sum( map(w->cos(t .* w * pi), filter(far, [1/4; rand(10)/4]) ))

# Generate a non-uniformly sampled sinusoid by randomly dropping samples
idx = collect(1:length(f))
idx = sort(vcat(idx[1:4:end], randsubseq(setdiff(idx, idx[1:4:end]),0.2)))
f_loss = f[idx]
t_loss = float64(t[idx])
dt_loss = [1.0; diff(t_loss)]

# Use our approach to filter the non-uniformly sampled signal
# using a band-pass Butterworth filter.
r = [-1801.059770790529228179366327822208 + 1im*-904.148432321337622852297499775887, -1801.059770854720682109473273158073 + 1im*904.148432347037214640295132994652, -2554.067114208371094719041138887405 + 1im*914.061768128862922822008840739727, -2554.067114313411366310901939868927 + 1im*-914.061768132487713955924846231937, 1243.840599652786977458163164556026 + 1im*5286.160866626520146382972598075867, 1243.840599652786977458163164556026 + 1im*-5286.160866626520146382972598075867, 3111.091754444928028533468022942543 + 1im*-5311.610888351207904634065926074982, 3111.091754432160087162628769874573 + 1im*5311.610888194429207942448556423187, ]
p = [0.930791459319175729092421534006 + 1im*0.305831140263320089278664681842, 0.930791459319175729092421534006 + 1im*-0.305831140263320089278664681842, 0.882790368404198000362725906598 + 1im*0.408768268188834882348459132118, 0.882790368404198000362725906598 + 1im*-0.408768268188834882348459132118, 0.891387984990748893920908813016 + 1im*0.319561016135798792170419346803, 0.891387984990748893920908813016 + 1im*-0.319561016135798792170419346803, 0.868578425037465073899056733353 + 1im*0.359606979068075038874496840435, 0.868578425037465073899056733353 + 1im*-0.359606979068075038874496840435, ]
k = [1.389061890196454651658086731913 + 1im*0.000000000000000000000000000000, ]
gain = 73608.355577600581455044448375701904296875
tf = TransferFunction(r,p,k)
g = ours_highorder(f_loss, dt_loss, tf,
                   direction=Causal,
                   boundarycondition=Relaxed)
g = ours_highorder(g, dt_loss, tf,
                   direction=AnticausalInSeries,
                   boundarycondition=Relaxed)
g /= gain*gain

# Plot the input sinusoid
figure(figsize=(8,1))
plot(t_loss,f_loss,color="black", lw=2, marker="o", markerfacecolor="orange", markersize=6)
ylim(-4.5,4.5)
xlim(100,230)
yticks([-4,0,4])
xticks([])
title("(a) Noisy non-uniformly sampled input signal")

# Plot the filtering result
figure(figsize=(8,1))
plot(t, f_in, color="royalblue", lw=2)
plot(t_loss, g, lw=0, marker="o", markerfacecolor="orange", markersize=6)
ylim(-1.2,1.2)
xlim(100,230)
yticks([-1,0,1])
xticks([])
title("(b) De-noised non-uniform signal generated by our method")

nothing

# vim: set tabstop=4 shiftwidth=4 expandtab foldmethod=manual :
